!<arch>
0-isupper.c/    0           0     0     644     187       `
#include "main.h"
/**
 * _isupper - uppercase letters
 * @c: char to check
 *
 * Return: 0 or 1
 */
int _isupper(int c)
{
if (c >= 'A' && c <= 'Z')
{
return (1);
}
else
{
return (0);
}
}

0-memset.c/     0           0     0     644     321       `
#include "main.h"
#include <stdio.h>
/**
 * _memset - function that fills memory with a constant byte
 * @s: pointer to memory
 * @b: constant byte
 * @n: bytes to fill
 * Return:(s)pointer to memory
 */
char *_memset(char *s, char b, unsigned int n)
{
unsigned int i;
for (i = 0; i < n; i++)
{
s[i] = b;
}
return (s);
}

0-strcat.c/     0           0     0     644     324       `
#include "main.h"
/**
 * _strcat - concatenates two strings
 * @dest: input value
 * @src: input value
 * Return: void
 */
char *_strcat(char *dest, char *src)
{
char *dest_ptr = dest;
while (*dest_ptr != '\0')
{
dest_ptr++;
}
while (*src != '\0')
{
*dest_ptr = *src;
dest_ptr++;
src++;
}
*dest_ptr = '\0';
return (dest);
}
100-atoi.c/     0           0     0     644     454       `
#include "main.h"
#include <stdio.h>
#include <stdlib.h>
/**
 * _atoi - converts a string to an integer
 * @s: string to be converted
 *
 * Return: the int converted from the string
 */
int _atoi(char *s)
{
int result = 0;
int sign = 1;
int i = 0;
while (s[i] != '\0' && (s[i] < '0' || s[i] > '9'))
{
if (s[i] == '-')
{
sign *= -1;
}
i++;
}
while (s[i] != '\0' && (s[i] >= '0' && s[i] <= '9'))
{
result = result * 10 + (s[i] - '0');
i++;
}
return (0);
}
1-isdigit.c/    0           0     0     644     221       `
#include "main.h"
/**
 * _isdigit - check if number is digit 0 - 9
 * @c: char to be checked
 *
 * Return: 1 if digit otherwise 0
 */
int _isdigit(int c)
{
if (c >= '0' && c <= '9')
{
return (1);
}
else
{
return (0);
}
}

1-memcpy.c/     0           0     0     644     361       `
#include "main.h"
#include <stdio.h>
/**
 * _memcpy - function that copies memory area
 * @dest: pointer to memory arear
 * @src: pointer to source memory area
 * @n: bytes to copy
 * Return: a pointer to @dest memory area
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int i;
for (i = 0; i < n; i++)
{
dest[i] = src[i];
}
return (dest);
}

1-strncat.c/    0           0     0     644     442       `
#include "main.h"
/**
 * _strncat - Function Concatenates at most n characters
 * from src to end of dest using at most n bytes from src
 * @dest: input value
 * @src: input value
 * @n: input value
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
char *dest_ptr = dest;
while (*dest_ptr != '\0')
{
dest_ptr++;
}
while (*src != '\0' && n > 0)
{
*dest_ptr = *src;
dest_ptr++;
src++;
n--;
}
*dest_ptr = '\0';
return (dest);
}
2-strchr.c/     0           0     0     644     366       `
#include "main.h"
#include <stddef.h>
/**
 * _strchr - function that locates a character in a string
 * @s: pointer to string
 * @c: character to find
 * Return: pointer to the first occurrence of c in s, or NULL if not found
 */
char *_strchr(char *s, char c)
{
while (*s != '\0')
{
if (*s == c)
{
return (s);
}
s++;
}
if (*s == c)
{
return (s);
}
return (NULL);
}
2-strlen.c/     0           0     0     644     241       `
#include "main.h"
/**
 * _strlen - function that returns the length of a string
 * @s: pointer to the & of string
 * Return:length of string
 */
int _strlen(char *s)
{
int length = 0;
while (*s != '\0')
{
length++;
s++;
}
return (length);
}

2-strncpy.c/    0           0     0     644     350       `
#include "main.h"
/**
 * _strncpy - copy a string
 * @dest: input value
 * @src: input value
 * @n: input value
 * Return: (dest)
 */
char *_strncpy(char *dest, char *src, int n)
{
char *dest_ptr = dest;
while (*src != '\0' && n > 0)
{
*dest_ptr = *src;
dest_ptr++;
src++;
n--;
}
while (n > 0)
{
*dest_ptr = '\0';
dest_ptr++;
n--;
}
return (dest);
}
3-islower.c/    0           0     0     644     237       `
#include "main.h"
/**
 *  * _islower - check if char is lowercase
 * @c: is the char to be checked
 * Return: 1 if char is lowercase, otherwise 0
 */
int _islower(int c)
{
if (c >= 'a' && c <= 'z')
{
return (1);
}
else
{
return (0);
}
}

3-puts.c/       0           0     0     644     188       `
#include "main.h"
/**
 * _puts - puts strings to stdout
 * @str: string to print in stdout
 *
 */
void _puts(char *str)
{
while (*str != '\0')
{
_putchar(*str);
str++;
}
_putchar('\n');
}
3-strcmp.c/     0           0     0     644     272       `
#include "main.h"
/**
 * _strcmp - function to compare two strings
 * @s1: string 1
 * @s2: string 2
 * Return: *(s1-s2)
 */
int _strcmp(char *s1, char *s2)
{
while (*s1 != '\0' && *s2 != '\0')
{
if (*s1 != *s2)
{
return (*s1 - *s2);
}
s1++;
s2++;
}
return (*s1 - *s2);
}
3-strspn.c/     0           0     0     644     502       `
#include "main.h"
/**
 * _strspn -  function that gets the length of a prefix substring
 * @s: pointer to the string
 * @accept: pointer to the set of bytes
 * Return: number of bytes in initial segment of @s with bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
unsigned int len = 0;
int i, j;
for (i = 0; s[i] != '\0'; i++)
{
int found = 0;
for (j = 0; accept[j] != '\0'; j++)
{
if (s[i] == accept[j])
{
found = 1;
break;
}
}
if (!found)
{
return (len);
}
len++;
}
return (len);
}
4-isalpha.c/    0           0     0     644     291       `
#include "main.h"
/**
 * _isalpha - Function that checks for alphabetic character
 * @c: is the char to be checked
 * Return: 1 if char lowercase or uppercase, otherwise 0
 */
int _isalpha(int c)
{
if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
{
return (1);
}
else
{
return (0);
}
}

4-strpbrk.c/    0           0     0     644     432       `
#include "main.h"
#include <stddef.h>
/**
 * _strpbrk - function that searches a string for any of a set of bytes
 * @s: pointer to the string
 * @accept: pointer to the set of bytes to search
 * Return: pointer to the first matching byte in @s, or NULL if not found
 */
char *_strpbrk(char *s, char *accept)
{
while (*s != '\0')
{
char *a = accept;
while (*a != '\0')
{
if (*s == *a)
{
return (s);
}
a++;
}
s++;
}
return (NULL);
}
5-strstr.c/     0           0     0     644     547       `
#include "main.h"
#include <stddef.h>
/**
 * _strstr - function that locates a substring
 * @haystack: pointer to the string to search within
 * @needle: pointer to the substring to search for
 * Return: pointer to the start of the located substring, or NULL if not found
 */
char *_strstr(char *haystack, char *needle)
{
if (*needle == '\0')
{
return (haystack);
}
while (*haystack != '\0')
{
char *h = haystack;
char *n = needle;
while (*n != '\0' && *h == *n)
{
h++;
n++;
}
if (*n == '\0')
{
return (haystack);
}
haystack++;
}
return (NULL);
}

6-abs.c/        0           0     0     644     207       `
#include "main.h"
/**
 * _abs - computes the absolute value of an integer
 * @num: to check
 * Return: absolute value of num
 */
int _abs(int num)
{

if (num < 0)
{
return (-num);
}
else
{
return (num);
}
}

9-strcpy.c/     0           0     0     644     286       `
#include "main.h"
/**
 * char *_strcpy - a function that copies the string pointed to by src
 * @dest: copy to
 * @src: copy from
 * Return: string
 */
char *_strcpy(char *dest, char *src)
{
int i;
for (i = 0; src[i] != '\0'; i++)
{
dest[i] = src[i];
}
dest[i] = '\0';
return (dest);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

